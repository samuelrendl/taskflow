datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}
 
generator client {
  provider = "prisma-client-js"
}

enum Role {
  ADMIN
  MANAGER
  DEVELOPER
  USER
}

enum IssueStatus {
  OPEN
  IN_PROGRESS
  CLOSED
}

enum IssuePriority {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}
 
model User {
  id              String          @id @default(cuid())
  name            String?
  email           String          @unique
  emailVerified   DateTime?
  role            Role          @default(USER)
  image           String?
  teamId          String?         
  team  Team?  @relation("TeamUsers", fields: [teamId], references: [id])
  organizationId  String?
  organization    Organization?   @relation("OrganizationUsers", fields: [organizationId], references: [id])
  ownedOrganizations Organization[] @relation("OrganizationOwner")
  accounts        Account[]
  sessions        Session[]
  issuesAssigned  Issue[]         @relation("AssignedIssues")
  issuesCreated   Issue[]         @relation("CreatedIssues")
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
}
model Organization {
  id          String   @id @default(cuid())
  name        String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  ownerId     String
  owner       User     @relation("OrganizationOwner", fields: [ownerId], references: [id])
  users       User[]   @relation("OrganizationUsers")
  teams       Team[]
}

model Team {
  id String @id @default(cuid())
  name String
  users User[] @relation("TeamUsers")
  organizationId String
  organization Organization @relation(fields: [organizationId], references: [id])
}

model Issue {
  id            String    @id @default(cuid())
  title         String
  description   String
  status        IssueStatus
  priority      IssuePriority
  assignedToId  String? 
  assignedTo    User?     @relation("AssignedIssues", fields: [assignedToId], references: [id])
  createdById   String
  createdBy     User      @relation("CreatedIssues", fields: [createdById], references: [id])
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}
 
model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@id([provider, providerAccountId])
}
 
model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
 
model VerificationToken {
  identifier String
  token      String
  expires    DateTime
 
  @@id([identifier, token])
}
 